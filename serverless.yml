service: diagram-generator-api

plugins:
  - serverless-offline

provider:
  name: aws
  iam:
    role: arn:aws:iam::150209693186:role/LabRole
  runtime: python3.9
  region: us-east-1
  timeout: 30
  stage: dev
  environment:
    DIAGRAM_BUCKET: diagrams-bucket-hackathon
  
  ecr:
    images:
      appimage:
        path: ./

functions:
  # --- SINTAXIS CORREGIDA ---
  generateFlowchart:
    image:
      # 1. El nombre de la imagen que definimos en el provider
      name: appimage
      # 2. El comando que sobreescribe el CMD del Dockerfile
      #    Le dice a Lambda qué función ejecutar DENTRO del contenedor.
      command:
        - src/functions/generate_flowchart.generate_flowchart
    events:
      - http:
          path: diagrams/flowchart
          method: post
          cors: true

  generateERD:
    image:
      name: appimage
      command:
        - src/functions/generate_erd.generate_erd
    events:
      - http:
          path: diagrams/erd
          method: post
          cors: true

  generateJSONSchema:
    image:
      name: appimage
      command:
        - src/functions/generate_json_schema.generate_json_schema
    events:
      - http:
          path: diagrams/json-schema
          method: post
          cors: true

# La sección de 'resources' para DynamoDB no cambia.
resources:
  Resources:
    DiagramsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-diagrams
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

# La sección 'custom' ya no es necesaria.